import order.filter.lift
import order.filter.at_top_bot

variables {Œ± Œ≤ : Type*}

open_locale classical filter

namespace set

variables [preorder Œ±]

def ord_connected (s : set Œ±) : Prop := ‚àÄ ‚¶Éx‚¶Ñ (hx : x ‚àà s) ‚¶Éy‚¶Ñ (hy : y ‚àà s), Icc x y ‚äÜ s

lemma ord_connected.inter {s t : set Œ±} (hs : ord_connected s) (ht : ord_connected t) :
  ord_connected (s ‚à© t) :=
Œª x hx y hy, subset_inter (hs hx.1 hy.1) (ht hx.2 hy.2)

lemma ord_connected.dual {s : set Œ±} (hs : ord_connected s) : @ord_connected (order_dual Œ±) _ s :=
Œª x hx y hy z hz, hs hy hx ‚ü®hz.2, hz.1‚ü©

lemma ord_connected_dual {s : set Œ±} : @ord_connected (order_dual Œ±) _ s ‚Üî ord_connected s :=
‚ü®Œª h, h.dual, Œª h, h.dual‚ü©

lemma ord_connected_sInter {S : set (set Œ±)} (hS : ‚àÄ s ‚àà S, ord_connected s) :
  ord_connected (‚ãÇ‚ÇÄ S) :=
Œª x hx y hy, subset_sInter $ Œª s hs, hS s hs (hx s hs) (hy s hs)

lemma ord_connected_Inter {Œπ : Sort*} {s : Œπ ‚Üí set Œ±} (hs : ‚àÄ i, ord_connected (s i)) :
  ord_connected (‚ãÇ i, s i) :=
ord_connected_sInter $ forall_range_iff.2 hs

lemma ord_connected_bInter {Œπ : Sort*} {p : Œπ ‚Üí Prop} {s : Œ† (i : Œπ) (hi : p i), set Œ±}
  (hs : ‚àÄ i hi, ord_connected (s i hi)) :
  ord_connected (‚ãÇ i hi, s i hi) :=
ord_connected_Inter $ Œª i, ord_connected_Inter $ hs i

lemma ord_connected_Ici {a : Œ±} : ord_connected (Ici a) := Œª x hx y hy z hz, le_trans hx hz.1
lemma ord_connected_Iic {a : Œ±} : ord_connected (Iic a) := Œª x hx y hy z hz, le_trans hz.2 hy
lemma ord_connected_Ioi {a : Œ±} : ord_connected (Ioi a) := Œª x hx y hy z hz, lt_of_lt_of_le hx hz.1
lemma ord_connected_Iio {a : Œ±} : ord_connected (Iio a) := Œª x hx y hy z hz, lt_of_le_of_lt hz.2 hy

lemma ord_connected_Icc {a b : Œ±} : ord_connected (Icc a b) :=
ord_connected_Ici.inter ord_connected_Iic

lemma ord_connected_Ico {a b : Œ±} : ord_connected (Ico a b) :=
ord_connected_Ici.inter ord_connected_Iio

lemma ord_connected_Ioc {a b : Œ±} : ord_connected (Ioc a b) :=
ord_connected_Ioi.inter ord_connected_Iic

lemma ord_connected_Ioo {a b : Œ±} : ord_connected (Ioo a b) :=
ord_connected_Ioi.inter ord_connected_Iio

end set

open set function

namespace filter

variables [preorder Œ±]

class is_interval_generated (f : filter Œ±) : Prop :=
(exists_ord_connected_mem : ‚àÄ ‚¶És‚¶Ñ, s ‚àà f ‚Üí ‚àÉ t ‚àà f, ord_connected t ‚àß t ‚äÜ s)

export is_interval_generated (exists_ord_connected_mem)

lemma has_basis.is_interval_generated {f : filter Œ±} {Œπ} {p : Œπ ‚Üí Prop} {s} (h : f.has_basis p s)
  (hs : ‚àÄ i, p i ‚Üí ord_connected (s i)) :
  is_interval_generated f :=
begin
  refine ‚ü®Œª t ht, _‚ü©,
  rcases h.mem_iff.1 ht with ‚ü®i, hi, hsi‚ü©,
  exact ‚ü®s i, h.mem_of_mem hi, hs i hi, hsi‚ü©,
end

lemma has_ord_connected_basis (f : filter Œ±) [is_interval_generated f] :
  f.has_basis (Œª s : set Œ±, s ‚àà f ‚àß ord_connected s) id :=
f.basis_sets.restrict $ Œª s hs,
  by simpa only [exists_prop, and_assoc] using exists_ord_connected_mem hs

lemma is_interval_generated_principal_iff {s : set Œ±} :
  is_interval_generated (ùìü s) ‚Üî ord_connected s :=
begin
  refine ‚ü®_, Œª h, has_basis_principal.is_interval_generated (Œª _ _, h)‚ü©,
  introI h,
  rcases exists_ord_connected_mem (mem_principal_self s) with ‚ü®t, hst, ht, hts‚ü©,
  rwa [subset.antisymm hst hts]
end

alias is_interval_generated_principal_iff ‚Üî _ set.ord_connected.is_interval_generated_principal

instance is_interval_generated_inf {f g : filter Œ±} [is_interval_generated f]
  [is_interval_generated g] :
  is_interval_generated (f ‚äì g) :=
begin
  apply ((has_ord_connected_basis f).inf (has_ord_connected_basis g)).is_interval_generated,
  rintros ‚ü®s, t‚ü© ‚ü®‚ü®hsf, hsc‚ü©, htg, htc‚ü©,
  exact hsc.inter htc
end

instance is_interval_generated_at_top : is_interval_generated (at_top : filter Œ±) :=
(has_basis_infi_principal_finite _).is_interval_generated $ Œª t ht, ord_connected_bInter $
  Œª i hi, ord_connected_Ici

instance is_interval_generated_at_bot : is_interval_generated (at_bot : filter Œ±) :=
(has_basis_infi_principal_finite _).is_interval_generated $ Œª t ht, ord_connected_bInter $
  Œª i hi, ord_connected_Iic

lemma tendsto_Ixx_same_filter {Ixx : Œ± ‚Üí Œ± ‚Üí set Œ±} (hI : ‚àÄ x y, Ixx x y ‚äÜ Icc x y)
  (l : filter Œ±) [is_interval_generated l] :
  tendsto (uncurry Ixx) (l √ó·∂† l) (l.lift' powerset) :=
begin
  rw [l.basis_sets.prod_self.tendsto_iff (l.basis_sets.lift' (Œª _ _, powerset_mono.2))],
  intros s hs,
  rcases exists_ord_connected_mem hs with ‚ü®t, htl, htc, hts‚ü©,
  exact ‚ü®t, htl, Œª x hx, subset.trans (hI _ _) (subset.trans (htc hx.1 hx.2) hts)‚ü©
end

lemma tendsto.Ixx {la : filter Œ±} [is_interval_generated la]
  {Ixx : Œ± ‚Üí Œ± ‚Üí set Œ±} (hI : ‚àÄ x y, Ixx x y ‚äÜ Icc x y)
  {lb : filter Œ≤} {f g : Œ≤ ‚Üí Œ±} (hf : tendsto f lb la) (hg : tendsto g lb la) :
  tendsto (Œª x, Ixx (f x) (g x)) lb (la.lift' powerset) :=
(tendsto_Ixx_same_filter hI _).comp (hf.prod_mk hg)

lemma tendsto.Icc {lb : filter Œ≤} {la : filter Œ±} [is_interval_generated la]
  {f g : Œ≤ ‚Üí Œ±} (hf : tendsto f lb la) (hg : tendsto g lb la) :
  tendsto (Œª x, Icc (f x) (g x)) lb (la.lift' powerset) :=
hf.Ixx (Œª _ _, subset.refl _) hg

lemma tendsto.Ico {lb : filter Œ≤} {la : filter Œ±} [is_interval_generated la]
  {f g : Œ≤ ‚Üí Œ±} (hf : tendsto f lb la) (hg : tendsto g lb la) :
  tendsto (Œª x, Ico (f x) (g x)) lb (la.lift' powerset) :=
hf.Ixx (Œª _ _, Ico_subset_Icc_self) hg

lemma tendsto.Ioc {lb : filter Œ≤} {la : filter Œ±} [is_interval_generated la]
  {f g : Œ≤ ‚Üí Œ±} (hf : tendsto f lb la) (hg : tendsto g lb la) :
  tendsto (Œª x, Ioc (f x) (g x)) lb (la.lift' powerset) :=
hf.Ixx (Œª _ _, Ioc_subset_Icc_self) hg

lemma tendsto.Ioo {lb : filter Œ≤} {la : filter Œ±} [is_interval_generated la]
  {f g : Œ≤ ‚Üí Œ±} (hf : tendsto f lb la) (hg : tendsto g lb la) :
  tendsto (Œª x, Ioo (f x) (g x)) lb (la.lift' powerset) :=
hf.Ixx (Œª _ _, Ioo_subset_Icc_self) hg

end filter

open set filter

lemma set.ord_connected.is_interval_generated_inf_principal [preorder Œ±]
  {f : filter Œ±} [is_interval_generated f] {s : set Œ±} (hs : ord_connected s) :
  is_interval_generated (f ‚äì ùìü s) :=
by haveI := hs.is_interval_generated_principal; apply_instance
