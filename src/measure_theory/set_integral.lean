/-
Copyright (c) 2020 Zhouhang Zhou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Zhouhang Zhou
-/
import measure_theory.bochner_integration
import measure_theory.measure_topology
import analysis.normed_space.indicator_function

/-!
# Set integral

This file is temporarily commented out because of an ongoing refactor.

Integrate a function over a subset of a measure space.

## Main definitions

`measurable_on`, `integrable_on`, `integral_on`

## Notation

`‚à´ a in s, f a` is `measure_theory.integral (s.indicator f)`
-/

noncomputable theory
open set filter topological_space measure_theory
open_locale classical topological_space interval big_operators filter

variables {Œ± Œ≤ E F : Type*} [measurable_space Œ±]

section piecewise

variables {Œº : measure Œ±} {s : set Œ±} {f g : Œ± ‚Üí Œ≤}

lemma piecewise_ae_eq_restrict (hs : is_measurable s) : piecewise s f g =·µê[Œº.restrict s] f :=
by { rw [ae_restrict_eq hs], exact (piecewise_eq_on s f g).eventually_eq.inf_of_right }

lemma piecewise_ae_eq_restrict_compl (hs : is_measurable s) :
  piecewise s f g =·µê[Œº.restrict s·∂ú] g :=
by { rw [ae_restrict_eq hs.compl], exact (piecewise_eq_on_compl s f g).eventually_eq.inf_of_right }

end piecewise

section indicator_function

variables [has_zero Œ≤] {Œº : measure Œ±} {s : set Œ±} {f : Œ± ‚Üí Œ≤}

lemma indicator_ae_eq_restrict (hs : is_measurable s) : indicator s f =·µê[Œº.restrict s] f :=
piecewise_ae_eq_restrict hs

lemma indicator_ae_eq_restrict_compl (hs : is_measurable s) : indicator s f =·µê[Œº.restrict s·∂ú] 0 :=
piecewise_ae_eq_restrict_compl hs

end indicator_function

namespace measure_theory

section normed_group

variables [normed_group E] {f : Œ± ‚Üí E} {s t : set Œ±} {Œº ŒΩ : measure Œ±}

/-- A function is `integrable_on` a set `s` if the integral of its pointwise norm over `s` is less
than infinity. -/
def integrable_on (f : Œ± ‚Üí E) (s : set Œ±) (Œº : measure Œ± . volume_tac) : Prop :=
integrable f (Œº.restrict s)

lemma integrable_on.integrable (h : integrable_on f s Œº) :
  integrable f (Œº.restrict s) :=
h

@[simp] lemma integrable_on_empty : integrable_on f ‚àÖ Œº :=
by simp [integrable_on]

@[simp] lemma integrable_on_univ : integrable_on f univ Œº ‚Üî integrable f Œº :=
by rw [integrable_on, measure.restrict_univ]

lemma integrable_on_zero : integrable_on (Œª _, (0:E)) s Œº := integrable_zero _ _ _

lemma integrable_on_const {C : E} : integrable_on (Œª _, C) s Œº ‚Üî C = 0 ‚à® Œº s < ‚ä§ :=
integrable_const_iff.trans $ by rw [measure.restrict_apply_univ]

lemma integrable_on.mono (h : integrable_on f t ŒΩ) (hs : s ‚äÜ t) (hŒº : Œº ‚â§ ŒΩ) :
  integrable_on f s Œº :=
h.mono_meas $ measure.restrict_mono hs hŒº

lemma integrable_on.mono_set (h : integrable_on f t Œº) (hst : s ‚äÜ t) :
  integrable_on f s Œº :=
h.mono hst (le_refl _)

lemma integrable_on.mono_meas (h : integrable_on f s ŒΩ) (hŒº : Œº ‚â§ ŒΩ) :
  integrable_on f s Œº :=
h.mono (subset.refl _) hŒº

lemma integrable_on.mono_set_ae (h : integrable_on f t Œº) (hst : s ‚â§·µê[Œº] t) :
  integrable_on f s Œº :=
h.integrable.mono_meas $ restrict_mono_ae hst

lemma integrable.integrable_on (h : integrable f Œº) : integrable_on f s Œº :=
h.mono_meas $ measure.restrict_le_self

lemma integrable.integrable_on' (h : integrable f (Œº.restrict s)) : integrable_on f s Œº :=
h

lemma integrable_on.left_of_union (h : integrable_on f (s ‚à™ t) Œº) : integrable_on f s Œº :=
h.mono_set $ subset_union_left _ _

lemma integrable_on.right_of_union (h : integrable_on f (s ‚à™ t) Œº) : integrable_on f t Œº :=
h.mono_set $ subset_union_right _ _

lemma integrable_on.union (hs : integrable_on f s Œº) (ht : integrable_on f t Œº) :
  integrable_on f (s ‚à™ t) Œº :=
(hs.add_meas ht).mono_meas $ measure.restrict_union_le _ _

@[simp] lemma integrable_on_union :
  integrable_on f (s ‚à™ t) Œº ‚Üî integrable_on f s Œº ‚àß integrable_on f t Œº :=
‚ü®Œª h, ‚ü®h.left_of_union, h.right_of_union‚ü©, Œª h, h.1.union h.2‚ü©

@[simp] lemma integrable_on_finite_union {s : set Œ≤} (hs : finite s) {t : Œ≤ ‚Üí set Œ±} :
  integrable_on f (‚ãÉ i ‚àà s, t i) Œº ‚Üî ‚àÄ i ‚àà s, integrable_on f (t i) Œº :=
begin
  apply hs.induction_on,
  { simp },
  { intros a s ha hs hf,
    simp [hf, or_imp_distrib, forall_and_distrib] }
end

@[simp] lemma integrable_on_finset_union {s : finset Œ≤} {t : Œ≤ ‚Üí set Œ±} :
  integrable_on f (‚ãÉ i ‚àà s, t i) Œº ‚Üî ‚àÄ i ‚àà s, integrable_on f (t i) Œº :=
integrable_on_finite_union s.finite_to_set

lemma integrable_on.add_meas (hŒº : integrable_on f s Œº) (hŒΩ : integrable_on f s ŒΩ) :
  integrable_on f s (Œº + ŒΩ) :=
by { delta integrable_on, rw measure.restrict_add, exact hŒº.integrable.add_meas hŒΩ }

@[simp] lemma integrable_on_add_meas :
  integrable_on f s (Œº + ŒΩ) ‚Üî integrable_on f s Œº ‚àß integrable_on f s ŒΩ :=
‚ü®Œª h, ‚ü®h.mono_meas (measure.le_add_right (le_refl _)),
  h.mono_meas (measure.le_add_left (le_refl _))‚ü©,
  Œª h, h.1.add_meas h.2‚ü©

lemma integrable_on.indicator (h : integrable_on f s Œº) (hs : is_measurable s) :
  integrable (indicator s f) Œº :=
by simpa only [integrable_on, integrable, nnnorm_indicator_eq_indicator_nnnorm,
  ennreal.coe_indicator, lintegral_indicator _ hs] using h

lemma integrable_on_of_bounded {C} (hs : Œº s < ‚ä§) (hf : ‚àÄ·µê x ‚àÇ(Œº.restrict s), ‚à•f x‚à• ‚â§ C) :
  integrable_on f s Œº :=
by haveI : finite_measure (Œº.restrict s) := ‚ü®by rwa [measure.restrict_apply_univ]‚ü©;
  exact integrable_of_bounded hf

lemma locally_integrable_of_inf_ae {l : filter Œ±} {s : set Œ±}
  (hsl : s ‚àà l ‚äì Œº.ae) (hf : integrable_on f s Œº) :
  ‚àÉ s ‚àà l, integrable_on f s Œº :=
begin
  rcases hsl with ‚ü®t, ht, u, hu, hs‚ü©,
  refine ‚ü®t, ht, _‚ü©,
  dsimp only [integrable_on] at hf ‚ä¢,
  refine hf.mono_meas (Œª v hv, _),
  simp only [measure.restrict_apply hv],
  refine measure_le_of_ae_imp (mem_sets_of_superset hu $ Œª x hx, _),
  exact Œª ‚ü®hv, ht‚ü©, ‚ü®hv, hs ‚ü®ht, hx‚ü©‚ü©
end

lemma locally_integrable_on_of_is_bounded_under' {l : filter Œ±} [is_measurably_generated l]
  (hŒº : ‚àÉ s ‚àà l ‚äì Œº.ae, Œº s < ‚ä§) (hf : (l ‚äì Œº.ae).is_bounded_under (‚â§) (norm ‚àò f)) :
  ‚àÉ s ‚àà l, integrable_on f s Œº :=
begin
  rcases hŒº with ‚ü®s, hsl, hsŒº‚ü©,
  rcases hf with ‚ü®C, hC‚ü©,
  simp only [eventually_map] at hC,
  rcases hC.exists_measurable_mem with ‚ü®t, htl, htm, hC‚ü©,
  refine locally_integrable_of_inf_ae (inter_mem_sets htl hsl) _,
  refine integrable_on_of_bounded (lt_of_le_of_lt (measure_mono $ inter_subset_right _ _) hsŒº) _,
  exact C,
  suffices : ‚àÄ·µê x ‚àÇŒº.restrict t, ‚à•f x‚à• ‚â§ C,
    from ae_mono (measure.restrict_mono (inter_subset_left _ _) (le_refl _)) this,
  rw [ae_restrict_eq htm, eventually_inf_principal],
  exact eventually_of_forall hC
end

lemma locally_integrable_on_of_is_bounded_under [topological_space Œ±] [opens_measurable_space Œ±]
  [locally_finite_measure Œº] {a : Œ±} (hf : (ùìù a ‚äì Œº.ae).is_bounded_under (‚â§) (norm ‚àò f)) :
  ‚àÉ s ‚àà ùìù a, integrable_on f s Œº :=
locally_integrable_on_of_is_bounded_under' ((exists_mem_nhds_finite_meas a Œº).imp $
  Œª s hs, ‚ü®(inf_le_left : ùìù a ‚äì _ ‚â§ _) hs.fst, hs.snd‚ü©) hf

lemma locally_integrable_on_of_tendsto' [topological_space Œ±] [opens_measurable_space Œ±]
  [locally_finite_measure Œº] {a : Œ±} {b : E} (hf : tendsto f (ùìù a ‚äì Œº.ae) (ùìù b)) :
  ‚àÉ s ‚àà ùìù a, integrable_on f s Œº :=
locally_integrable_on_of_is_bounded_under hf.norm.is_bounded_under_le

lemma locally_integrable_on_of_tendsto [topological_space Œ±] [opens_measurable_space Œ±]
  [locally_finite_measure Œº] {a : Œ±} {b : E} (hf : tendsto f (ùìù a) (ùìù b)) :
  ‚àÉ s ‚àà ùìù a, integrable_on f s Œº :=
locally_integrable_on_of_tendsto' (tendsto_le_left inf_le_left hf)

lemma locally_integrable_on_of_continuous_at [topological_space Œ±] [opens_measurable_space Œ±]
  [locally_finite_measure Œº] {a : Œ±} (hf : continuous_at f a) :
  ‚àÉ s ‚àà ùìù a, integrable_on f s Œº :=
locally_integrable_on_of_tendsto hf

variables [measurable_space E] [borel_space E] [complete_space E] [second_countable_topology E]
  [normed_space ‚Ñù E]

lemma integral_union (hst : disjoint s t) (hs : is_measurable s) (ht : is_measurable t)
  (hfm : measurable f) (hfs : integrable_on f s Œº) (hft : integrable_on f t Œº) :
  ‚à´ x in s ‚à™ t, f x ‚àÇŒº = ‚à´ x in s, f x ‚àÇŒº + ‚à´ x in t, f x ‚àÇŒº :=
by simp only [integrable_on, measure.restrict_union hst hs ht, integral_add_meas hfm hfs hft]

lemma integral_empty : ‚à´ x in ‚àÖ, f x ‚àÇŒº = 0 := by rw [measure.restrict_empty, integral_zero_meas]

lemma integral_univ : ‚à´ x in univ, f x ‚àÇŒº = ‚à´ x, f x ‚àÇŒº := by rw [measure.restrict_univ]

lemma integral_add_compl (hs : is_measurable s) (hfm : measurable f) (hfi : integrable f Œº) :
  ‚à´ x in s, f x ‚àÇŒº + ‚à´ x in s·∂ú, f x ‚àÇŒº = ‚à´ x, f x ‚àÇŒº :=
by rw [‚Üê integral_union (disjoint_compl s) hs hs.compl hfm hfi.integrable_on hfi.integrable_on,
  union_compl_self, integral_univ]

lemma integral_indicator (hfm : measurable f) (hfi : integrable_on f s Œº)
  (hs : is_measurable s) :
  ‚à´ x, indicator s f x ‚àÇŒº = ‚à´ x in s, f x ‚àÇŒº :=
have hfms : measurable (indicator s f) := hfm.indicator hs,
calc ‚à´ x, indicator s f x ‚àÇŒº = ‚à´ x in s, indicator s f x ‚àÇŒº + ‚à´ x in s·∂ú, indicator s f x ‚àÇŒº :
  (integral_add_compl hs hfms (hfi.indicator hs)).symm
... = ‚à´ x in s, f x ‚àÇŒº + ‚à´ x in s·∂ú, 0 ‚àÇŒº :
  congr_arg2 (+) (integral_congr_ae hfms hfm (indicator_ae_eq_restrict hs))
    (integral_congr_ae hfms measurable_const (indicator_ae_eq_restrict_compl hs))
... = ‚à´ x in s, f x ‚àÇŒº : by simp

lemma set_integral_const (c : E) : ‚à´ x in s, c ‚àÇŒº = (Œº s).to_real ‚Ä¢ c :=
by rw [integral_const, measure.restrict_apply_univ]

lemma norm_set_integral_le_of_norm_le_const {C : ‚Ñù} (hs : Œº s < ‚ä§)
  (hC : ‚àÄ·µê x ‚àÇ(Œº.restrict s), ‚à•f x‚à• ‚â§ C) :
  ‚à•‚à´ x in s, f x ‚àÇŒº‚à• ‚â§ C * (Œº s).to_real :=
begin
  rw ‚Üê measure.restrict_apply_univ at *,
  haveI : finite_measure (Œº.restrict s) := ‚ü®‚Äπ_‚Ä∫‚ü©,
  exact norm_integral_le_of_norm_le_const hC
end

end normed_group

end measure_theory

open measure_theory

lemma is_compact.integrable_on_of_bounded_ae [topological_space Œ±] [opens_measurable_space Œ±]
  [t2_space Œ±]
  [normed_group E] {Œº : measure Œ±} [locally_finite_measure Œº] {s : set Œ±} (hs : is_compact s)
  {f : Œ± ‚Üí E} {C : ‚Ñù} (hC : ‚àÄ·µê x ‚àÇŒº, x ‚àà s ‚Üí ‚à•f x‚à• ‚â§ C) :
  integrable_on f s Œº :=
begin
  refine is_compact.induction_on hs integrable_on_empty (Œª s t hst ht, ht.mono_set hst)
    (Œª s t h, h.union) _,
  intros x hx,
  haveI := hs.is_measurable.principal_is_measurably_generated,
  dunfold nhds_within,
  apply locally_integrable_on_of_is_bounded_under',
  { rcases exists_mem_nhds_finite_meas x Œº with ‚ü®t, ht, htŒº‚ü©,
    exact ‚ü®t, mem_inf_sets_of_left (mem_inf_sets_of_left ht), htŒº‚ü© },
  { rw [‚Üê eventually_inf_principal] at hC,
    exact ‚ü®C, eventually_map.2 $
      hC.filter_mono (le_inf inf_le_right (le_trans inf_le_left inf_le_right))‚ü© }
end

lemma continuous_on.integrable_on_compact [topological_space Œ±] [opens_measurable_space Œ±]
  [t2_space Œ±]
  [normed_group E] {Œº : measure Œ±} [locally_finite_measure Œº] {s : set Œ±} (hs : is_compact s)
  {f : Œ± ‚Üí E} (hf : continuous_on f s) :
  integrable_on f s Œº :=
let ‚ü®C, hC‚ü© := ((hs.image_of_continuous_on hf).image continuous_norm).bdd_above in
hs.integrable_on_of_bounded_ae (eventually_of_forall $
  Œª x hx, hC $ mem_image_of_mem _ $ mem_image_of_mem _ hx)

lemma continuous.integrable_on_compact [topological_space Œ±] [opens_measurable_space Œ±]
  [t2_space Œ±] [normed_group E] {Œº : measure Œ±} [locally_finite_measure Œº]
  {f : Œ± ‚Üí E} (hf : continuous f) {s : set Œ±} (hs : is_compact s) :
  integrable_on f s Œº :=
hf.continuous_on.integrable_on_compact hs

lemma continuous.integrable_on_of_compact_closure [topological_space Œ±] [opens_measurable_space Œ±]
  [t2_space Œ±] [normed_group E] {Œº : measure Œ±} [locally_finite_measure Œº]
  {f : Œ± ‚Üí E} (hf : continuous f) {s : set Œ±} (hs : is_compact (closure s)) :
  integrable_on f s Œº :=
(hf.integrable_on_compact hs).mono_set subset_closure


/-
namespace integrable

variables [measurable_space Œ±] [measurable_space Œ≤] [normed_group E]

protected lemma measure_mono

end integrable

end measure_theory

section integral_on
variables [measurable_space Œ±]
  [normed_group Œ≤] [second_countable_topology Œ≤] [normed_space ‚Ñù Œ≤] [complete_space Œ≤]
  [measurable_space Œ≤] [borel_space Œ≤]
  {s t : set Œ±} {f g : Œ± ‚Üí Œ≤} {Œº : measure Œ±}
open set

lemma integral_on_congr (hf : measurable f) (hg : measurable g) (hs : is_measurable s)
  (h : ‚àÄ·µê a ‚àÇŒº, a ‚àà s ‚Üí f a = g a) : ‚à´ a in s, f a ‚àÇŒº = ‚à´ a in s, g a ‚àÇŒº :=
integral_congr_ae hf hg $ _

lemma integral_on_congr_of_set (hsm : measurable_on s f) (htm : measurable_on t f)
  (h : ‚àÄ·µê a, a ‚àà s ‚Üî a ‚àà t) : (‚à´ a in s, f a) = (‚à´ a in t, f a) :=
integral_congr_ae hsm htm $ indicator_congr_of_set h

variables (s t)

lemma integral_on_smul (r : ‚Ñù) (f : Œ± ‚Üí Œ≤) : (‚à´ a in s, r ‚Ä¢ (f a)) = r ‚Ä¢ (‚à´ a in s, f a) :=
by rw [‚Üê integral_smul, indicator_smul]

lemma integral_on_mul_left (r : ‚Ñù) (f : Œ± ‚Üí ‚Ñù) : (‚à´ a in s, r * (f a)) = r * (‚à´ a in s, f a) :=
integral_on_smul s r f

lemma integral_on_mul_right (r : ‚Ñù) (f : Œ± ‚Üí ‚Ñù) : (‚à´ a in s, (f a) * r) = (‚à´ a in s, f a) * r :=
by { simp only [mul_comm], exact integral_on_mul_left s r f }

lemma integral_on_div (r : ‚Ñù) (f : Œ± ‚Üí ‚Ñù) : (‚à´ a in s, (f a) / r) = (‚à´ a in s, f a) / r :=
by { simp only [div_eq_mul_inv], apply integral_on_mul_right }

lemma integral_on_neg (f : Œ± ‚Üí Œ≤) : (‚à´ a in s, -f a) = - (‚à´ a in s, f a) :=
by { simp only [indicator_neg], exact integral_neg _ }

variables {s t}

lemma integral_on_add {s : set Œ±} (hfm : measurable_on s f) (hfi : integrable_on s f) (hgm : measurable_on s g)
  (hgi : integrable_on s g) : (‚à´ a in s, f a + g a) = (‚à´ a in s, f a) + (‚à´ a in s, g a) :=
by { simp only [indicator_add], exact integral_add hfm hfi hgm hgi }

lemma integral_on_sub (hfm : measurable_on s f) (hfi : integrable_on s f) (hgm : measurable_on s g)
  (hgi : integrable_on s g) : (‚à´ a in s, f a - g a) = (‚à´ a in s, f a) - (‚à´ a in s, g a) :=
by { simp only [indicator_sub], exact integral_sub hfm hfi hgm hgi }

lemma integral_on_le_integral_on_ae {f g : Œ± ‚Üí ‚Ñù} (hfm : measurable_on s f) (hfi : integrable_on s f)
  (hgm : measurable_on s g) (hgi : integrable_on s g) (h : ‚àÄ·µê a, a ‚àà s ‚Üí f a ‚â§ g a) :
  (‚à´ a in s, f a) ‚â§ (‚à´ a in s, g a) :=
begin
  apply integral_le_integral_ae hfm hfi hgm hgi,
  apply indicator_le_indicator_ae,
  exact h
end

lemma integral_on_le_integral_on {f g : Œ± ‚Üí ‚Ñù} (hfm : measurable_on s f) (hfi : integrable_on s f)
  (hgm : measurable_on s g) (hgi : integrable_on s g) (h : ‚àÄ a, a ‚àà s ‚Üí f a ‚â§ g a) :
  (‚à´ a in s, f a) ‚â§ (‚à´ a in s, g a) :=
integral_on_le_integral_on_ae hfm hfi hgm hgi $ by filter_upwards [] h

lemma integral_on_union (hsm : measurable_on s f) (hsi : integrable_on s f)
  (htm : measurable_on t f) (hti : integrable_on t f) (h : disjoint s t) :
  (‚à´ a in (s ‚à™ t), f a) = (‚à´ a in s, f a) + (‚à´ a in t, f a) :=
by { rw [indicator_union_of_disjoint h, integral_add hsm hsi htm hti] }

lemma integral_on_union_ae (hs : is_measurable s) (ht : is_measurable t) (hsm : measurable_on s f)
  (hsi : integrable_on s f) (htm : measurable_on t f) (hti : integrable_on t f) (h : ‚àÄ·µê a, a ‚àâ s ‚à© t) :
  (‚à´ a in (s ‚à™ t), f a) = (‚à´ a in s, f a) + (‚à´ a in t, f a) :=
begin
  have := integral_congr_ae _ _ (indicator_union_ae h f),
  rw [this, integral_add hsm hsi htm hti],
  { exact hsm.union hs ht htm },
  { exact measurable.add hsm htm }
end

lemma integral_on_nonneg_of_ae {f : Œ± ‚Üí ‚Ñù} (hf : ‚àÄ·µê a, a ‚àà s ‚Üí 0 ‚â§ f a) : (0:‚Ñù) ‚â§ (‚à´ a in s, f a) :=
integral_nonneg_of_ae $ by { filter_upwards [hf] Œª a h, indicator_nonneg' h }

lemma integral_on_nonneg {f : Œ± ‚Üí ‚Ñù} (hf : ‚àÄ a, a ‚àà s ‚Üí 0 ‚â§ f a) : (0:‚Ñù) ‚â§ (‚à´ a in s, f a) :=
integral_on_nonneg_of_ae $ univ_mem_sets' hf

lemma integral_on_nonpos_of_ae {f : Œ± ‚Üí ‚Ñù} (hf : ‚àÄ·µê a, a ‚àà s ‚Üí f a ‚â§ 0) : (‚à´ a in s, f a) ‚â§ 0 :=
integral_nonpos_of_nonpos_ae $ by { filter_upwards [hf] Œª a h, indicator_nonpos' h }

lemma integral_on_nonpos {f : Œ± ‚Üí ‚Ñù} (hf : ‚àÄ a, a ‚àà s ‚Üí f a ‚â§ 0) : (‚à´ a in s, f a) ‚â§ 0 :=
integral_on_nonpos_of_ae $ univ_mem_sets' hf

lemma tendsto_integral_on_of_monotone {s : ‚Ñï ‚Üí set Œ±} {f : Œ± ‚Üí Œ≤} (hsm : ‚àÄi, is_measurable (s i))
  (h_mono : monotone s) (hfm : measurable_on (Union s) f) (hfi : integrable_on (Union s) f) :
  tendsto (Œªi, ‚à´ a in (s i), f a) at_top (nhds (‚à´ a in (Union s), f a)) :=
let bound : Œ± ‚Üí ‚Ñù := indicator (Union s) (Œªa, ‚à•f a‚à•) in
begin
  apply tendsto_integral_of_dominated_convergence,
  { assume i, exact hfm.subset (hsm i) (subset_Union _ _) },
  { assumption },
  { show integrable_on (Union s) (Œªa, ‚à•f a‚à•), rwa integrable_on_norm_iff },
  { assume i, apply ae_of_all,
    assume a,
    rw [norm_indicator_eq_indicator_norm],
    exact indicator_le_indicator_of_subset (subset_Union _ _) (Œªa, norm_nonneg _) _ },
  { filter_upwards [] Œªa, le_trans (tendsto_indicator_of_monotone _ h_mono _ _) (pure_le_nhds _) }
end

lemma tendsto_integral_on_of_antimono (s : ‚Ñï ‚Üí set Œ±) (f : Œ± ‚Üí Œ≤) (hsm : ‚àÄi, is_measurable (s i))
  (h_mono : ‚àÄi j, i ‚â§ j ‚Üí s j ‚äÜ s i) (hfm : measurable_on (s 0) f) (hfi : integrable_on (s 0) f) :
  tendsto (Œªi, ‚à´ a in (s i), f a) at_top (nhds (‚à´ a in (Inter s), f a)) :=
let bound : Œ± ‚Üí ‚Ñù := indicator (s 0) (Œªa, ‚à•f a‚à•) in
begin
  apply tendsto_integral_of_dominated_convergence,
  { assume i, refine hfm.subset (hsm i) (h_mono _ _ (zero_le _)) },
  { exact hfm.subset (is_measurable.Inter hsm) (Inter_subset _ _) },
  { show integrable_on (s 0) (Œªa, ‚à•f a‚à•), rwa integrable_on_norm_iff },
  { assume i, apply ae_of_all,
    assume a,
    rw [norm_indicator_eq_indicator_norm],
    refine indicator_le_indicator_of_subset (h_mono _ _ (zero_le _)) (Œªa, norm_nonneg _) _ },
  { filter_upwards [] Œªa, le_trans (tendsto_indicator_of_antimono _ h_mono _ _) (pure_le_nhds _) }
end

-- TODO : prove this for an encodable type
-- by proving an encodable version of `filter.is_countably_generated_at_top_finset_nat `
lemma integral_on_Union (s : ‚Ñï ‚Üí set Œ±) (f : Œ± ‚Üí Œ≤) (hm : ‚àÄi, is_measurable (s i))
  (hd : ‚àÄ i j, i ‚â† j ‚Üí s i ‚à© s j = ‚àÖ) (hfm : measurable_on (Union s) f) (hfi : integrable_on (Union s) f) :
  (‚à´ a in (Union s), f a) = ‚àë'i, ‚à´ a in s i, f a :=
suffices h : tendsto (Œªn:finset ‚Ñï, ‚àë i in n, ‚à´ a in s i, f a) at_top (ùìù $ (‚à´ a in (Union s), f a)),
  by { rwa has_sum.tsum_eq },
begin
  have : (Œªn:finset ‚Ñï, ‚àë i in n, ‚à´ a in s i, f a) = Œªn:finset ‚Ñï, ‚à´ a in (‚ãÉi‚ààn, s i), f a,
  { funext,
    rw [‚Üê integral_finset_sum, indicator_finset_bUnion],
    { assume i hi j hj hij, exact hd i j hij },
    { assume i, refine hfm.subset (hm _) (subset_Union _ _) },
    { assume i, refine hfi.subset (subset_Union _ _) } },
  rw this,
  refine tendsto_integral_filter_of_dominated_convergence _ _ _ _ _ _ _,
  { exact indicator (Union s) (Œª a, ‚à•f a‚à•) },
  { exact is_countably_generated_at_top_finset_nat },
  { refine univ_mem_sets' (Œª n, _),
    simp only [mem_set_of_eq],
    refine hfm.subset (is_measurable.Union (Œª i, is_measurable.Union_Prop (Œªh, hm _)))
      (bUnion_subset_Union _ _), },
  { assumption },
  { refine univ_mem_sets' (Œª n, univ_mem_sets' $ _),
    simp only [mem_set_of_eq],
    assume a,
    rw ‚Üê norm_indicator_eq_indicator_norm,
    refine norm_indicator_le_of_subset (bUnion_subset_Union _ _) _ _ },
  { rw [‚Üê integrable_on, integrable_on_norm_iff], assumption },
  { filter_upwards [] Œªa, le_trans (tendsto_indicator_bUnion_finset _ _ _) (pure_le_nhds _) }
end

end integral_on
-/
